
# This file was *autogenerated* from the file hash_to_base.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_384 = Integer(384); _sage_const_4 = Integer(4); _sage_const_255 = Integer(255); _sage_const_256 = Integer(256); _sage_const_8 = Integer(8); _sage_const_96 = Integer(96); _sage_const_192 = Integer(192); _sage_const_224 = Integer(224); _sage_const_19 = Integer(19); _sage_const_32 = Integer(32); _sage_const_128 = Integer(128)
import hashlib
from utils import *

# Hash bytestring input to a field element.
def hash_to_base(x, i, H, hbits, p, label):
    F = GF(p)
    assert hbits >= floor(log(p, _sage_const_2 ).n()) + _sage_const_1 
    i =  i2osp(i, _sage_const_4 ) # interpret i as a 4-byte le unsigned integer
    xin = "h2c".encode() + label + i + x # concatenate inputs
    h = H()
    h.update(xin)
    t1 = h.digest()
    t1 = os2ip(t1) # recover integer from hash output
    # s = t1 >> (hbits - 1)
    t2 = t1 & ((_sage_const_1  << hbits) - _sage_const_1 )
    t3 = ZZ(t2)
    y = t3 % p
    return F(y)

# Helper function to extract parameters from a ciphersuite label
def h2b_from_ciphersuite(x, i, label):
    (_, curve, hash_name, _, _) = label.split("-")
    if curve == "Curve25519":
        p = _sage_const_2 ** _sage_const_255  - _sage_const_19 
    elif curve == "P256":
        p = _sage_const_2 **_sage_const_256  - _sage_const_2 **_sage_const_224  + _sage_const_2 **_sage_const_192  + _sage_const_2 **_sage_const_96  - _sage_const_1 
    elif curve == "P384":
        p = _sage_const_2 **_sage_const_384  - _sage_const_2 **_sage_const_128   - _sage_const_2 **_sage_const_96  + _sage_const_2 **_sage_const_32  - _sage_const_1 
    else:
        raise ValueError("Curve %s is not recognied" % curve)

    if hash_name == "SHA256":
        H = hashlib.sha256
        hbits = H().digest_size * _sage_const_8 
    elif hash_name == "SHA384":
        H = hashlib.sha384
        hbits = H().digest_size * _sage_const_8 
    elif hash_name == "SHA512":
        H = hashlib.sha512
        hbits = H().digest_size * _sage_const_8 
    else:
        raise ValueError("Hash %s is not recognied" % curve)

    return hash_to_base(x, i, H, hbits, p, label)

if __name__ == "__main__":
    print("HashToBase(\"%s\", %s) = %s" % ("test", _sage_const_0 , h2b_from_ciphersuite("test", _sage_const_0 , "H2C-Curve25519-SHA256-Elligator-Clear")))
    print("HashToBase(\"%s\", %s) = %s" % ("test", _sage_const_0 , h2b_from_ciphersuite("test", _sage_const_0 , "H2C-P256-SHA512-SWU-")))

